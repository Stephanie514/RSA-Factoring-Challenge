import random
import time
import math
import sys

def pollard_rho(n):
    if n % 2 == 0:
        return 2

    x_val = 2
    y_val = 2
    gcd_result = 1

    f_func = lambda x: (x**2 + 1) % n

    while gcd_result == 1:
        x_val = f_func(x_val)
        y_val = f_func(f_func(y_val))
        gcd_result = math.gcd(abs(x_val - y_val), n)

    return gcd_result

def is_prime_miller_rabin(n, num_tests=5):
    if n <= 1:
        return False
    if n <= 3:
        return True

    if n % 2 == 0:
        return False

    r_val, d_val = 0, n - 1
    while d_val % 2 == 0:
        r_val += 1
        d_val //= 2

    for _ in range(num_tests):
        a_val = random.randint(2, n - 2)
        x_val = pow(a_val, d_val, n)
        if x_val == 1 or x_val == n - 1:
            continue
        for _ in range(r_val - 1):
            x_val = pow(x_val, 2, n)
            if x_val == n - 1:
                break
        else:
            return False

    return True

def factorize_number(num):
    prime_factors = []
    
    if num < 2:
        return prime_factors
    
    while num % 2 == 0:
        prime_factors.append(2)
        num //= 2
    
    while not is_prime_miller_rabin(num):
        factor = pollard_rho(num)
        while num % factor == 0:
            prime_factors.append(factor)
            num //= factor
    
    if num > 1:
        prime_factors.append(num)
    
    return prime_factors

def main():
    if len(sys.argv) != 2:
        print("Usage: python factorize.py <file>")
        return

    file_path = sys.argv[1]

    start_time = time.time()

    try:
        with open(file_path, 'r') as file:
            numbers = file.readlines()

        for number in numbers:
            input_num = int(number.strip())
            factors = factorize_number(input_num)

            if len(factors) == 1 and factors[0] == input_num:
                print(f"{input_num} is prime.")
            else:
                factors_str = ' * '.join(map(str, factors))
                print(f"{input_num} = {factors_str}")

            if time.time() - start_time > 5:
                print("Time limit exceeded")
                exit()

    except FileNotFoundError:
        print(f"File '{file_path}' not found.")

if __name__ == '__main__':
    main()

